#!/usr/bin/env bash

# This script is like npx but also works for yarn pnp projects, and
# never tries to install anything. It is very fast.
#
# The script takes as arguments a command to execute and the arguments
# to pass to it. If the command is installed as a binary by an npm
# module in the current project, then that binary is used. Otherwise,
# the script is execed as normal from $PATH. In either case, the
# working directory is preserved.

if (( "$#" == 0 )); then
    echo >&2 "usage: apheleia-npx CMD [ARG...]"
    exit 1
fi

# This function prints the name of the current directory if it
# contains a file or directory named after the first argument, or the
# parent directory if it contains such a file, or the parent's parent,
# and so on. If no such file is found it returns nonzero.
# https://unix.stackexchange.com/a/22215
find_upwards() {
    fname="$1"

    path="${PWD}"
    while [[ -n "${path}" && ! -e "${path}/${fname}" ]]; do
        path="${path%/*}"
    done
    [[ -n "${path}" ]] && echo "${path}"
}

# No containing package.json: not an npm project, exec as normal.
if ! dir="$(find_upwards package.json)"; then
    exec "$@"
fi

# node_modules directory has the binary directly: use that one.
if [[ -x "${dir}/node_modules/.bin/$1" ]]; then
    exec "${dir}/node_modules/.bin/$1" "${@:2}"
fi

pnp_path="${dir}/.pnp.cjs"

# Pnp configuration found
if [[ -f "${pnp_path}" ]]; then
    apheleia_dir="$(cd $(dirname ${BASH_SOURCE[0]})/../.. &>/dev/null && pwd)"
    find_pnp="${apheleia_dir}/pnp-bin/pnp-bin.cjs"
    bin="$(${find_pnp} ${pnp_path} $1)"
    node=$(which node)
    # note: $bin might not be on the real filesystem,
    #   might be virtual or in a zip archive
    if [[ -n $bin && -x $node ]]; then
        if [[ -f "${dir}/.pnp.loader.mjs" ]]; then
           loader_opt="--loader ${dir}/.pnp.loader.mjs"
        fi
        command="${node} --require ${pnp_path} ${loader_opt} ${bin} ${@:2}"
        echo $command 1>&2
        exec ${command}
    fi
fi

# If not then default to executing globally.
exec "$@"
